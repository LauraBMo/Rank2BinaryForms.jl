var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Rank2BinaryForms","category":"page"},{"location":"#Rank2BinaryForms","page":"Home","title":"Rank2BinaryForms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Rank2BinaryForms. Package to compute the roots of the polynomials in the image of the map \\Gamma defined in ArXiv 1901.08320.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Rank2BinaryForms]","category":"page"},{"location":"#Rank2BinaryForms._buildpolynomial-Union{Tuple{T}, Tuple{Any, Any, Type{T}}} where T","page":"Home","title":"Rank2BinaryForms._buildpolynomial","text":"_buildpolynomial(roots, vars, _)\n\n\nGeneric function to build the polynomials in the image of Γ from the list of roots.\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.bc_canonical_to_any","page":"Home","title":"Rank2BinaryForms.bc_canonical_to_any","text":"bc_canonical_to_any(L)\nbc_canonical_to_any(L, R)\n\n\nReturns PGL matrix sending e_i=[0,..,1,..,0] to v[i] and [1,...,1] to u.\n\nn = 100\nv1 = matrix(QQ, rand(-n:n, 4, 1))\nv2 = matrix(QQ, rand(-n:n, 4, 1))\n\nu = 2*v1-4*v2\nnormalize_mat(u, v1, v2) == reduce(hcat, (2.*v1, -4.*v2))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Rank2BinaryForms.crossratio-NTuple{4, Any}","page":"Home","title":"Rank2BinaryForms.crossratio","text":"crossratio(A, B, C, D)\n\n\nReturns the cross ratio of four numbers.\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.fix_homo_base!-Tuple{Any, Any}","page":"Home","title":"Rank2BinaryForms.fix_homo_base!","text":"fix_homo_base!(M, u)\n\n\nReturns\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.four_tuples-Tuple{}","page":"Home","title":"Rank2BinaryForms.four_tuples","text":"four_tuples()\n\n\nReturns a function on the standard triplets of integers I, which returns tuples [[i, I...] for i in 1:d but not in I.\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.gamma-Tuple{}","page":"Home","title":"Rank2BinaryForms.gamma","text":"gamma()\n\n\nReturns a function on triplets of integers I which computes the roots of the polynomial Γ(I).\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.gamma_image-Tuple{}","page":"Home","title":"Rank2BinaryForms.gamma_image","text":"gamma_image()\n\n\nReturns the roots of all the polynomials in the image of Γ.\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.get_ratios-Tuple{Any, Any}","page":"Home","title":"Rank2BinaryForms.get_ratios","text":"get_ratios(u, M)\n\n\nGiven a vector u being a linear combination of the columns of M, returns the coefficients of such a linear combination. That is, returns v=[a_1,..,a_n] such that Mv = u.\n\n``julia n = 100 v1 = matrix(QQ, rand(-n:n, 4, 1)) v2 = matrix(QQ, rand(-n:n, 4, 1))\n\nu = 2v1-4v2 get_ratios([v1,v2], u) [ 2] [-4] ```\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.homo_uroots","page":"Home","title":"Rank2BinaryForms.homo_uroots","text":"homo_uroots()\nhomo_uroots(I)\n\n\nReturns vectors [1,-ξ_i] for the i-th (i in I = 1:d) d-th-root of unity.\n\n\n\n\n\n","category":"function"},{"location":"#Rank2BinaryForms.minors_indices-Tuple{Any, Any}","page":"Home","title":"Rank2BinaryForms.minors_indices","text":"minors_indices(M, k)\n\n\nReturns the indices (as an iterator) for all the kxk minors of M.\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.set_getting_rootsofunity-Tuple{Any}","page":"Home","title":"Rank2BinaryForms.set_getting_rootsofunity","text":"set_getting_rootsofunity(f)\n\n\nSets the method used to compute the d-th roots of unity. The input is a function f computing the roots of unity accepting calls as f(d)(k) and returning the k-th root of the d-th roots of unity. The order of the d-th roots of unity can be clockwise or anti-clockwise, but they must be ordered. Examples of valid inputs are the following functions f and g:\n\n    g(d, k) = exp(2*pi*im*k/d)\n    set_getting_rootsofunity(g)\n\n    using Nemo\n    CC = ComplexField(64);\n    f(d, k) = Nemo.root_of_unity(CC, d)^k;\n    set_getting_rootsofunity(f)\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.standard_triplets-Tuple{}","page":"Home","title":"Rank2BinaryForms.standard_triplets","text":"standard_triplets()\n\n\nReturns a vector with all the standard triplets of integers [1,j,k] with 1 < j < k <= d.\n\n\n\n\n\n","category":"method"},{"location":"#Rank2BinaryForms.uroots","page":"Home","title":"Rank2BinaryForms.uroots","text":"uroots()\nuroots(I)\n\n\nReturns the vector [ξ_i...] where ξ_i is the i-th d-th-root of unity for i in I (default I = 1:d).\n\n\n\n\n\n","category":"function"}]
}
